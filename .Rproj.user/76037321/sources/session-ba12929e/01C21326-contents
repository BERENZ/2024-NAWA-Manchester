---
title: "R Notebook"
output: html_notebook
---

```{r}
library(nonprobsvy)
library(survey)
library(ggplot2)
library(data.table)
library(sampling)
```

```{r}
data(diamonds)
set.seed(123)

n_b <- 1000 ## probability sample
N <- nrow(diamonds)
true <- mean(diamonds$price)

diamonds$carat_q <- cut(diamonds$carat, 
                        c(0, quantile(diamonds$carat, probs=c(0.25,0.5,0.75)), Inf),
                        include.lowest = T, 
                        right = T)

diamonds$carat_d <- cut(diamonds$carat, 
                        c(0, quantile(diamonds$carat, probs=seq(0.1,0.9,0.1)), Inf),
                        include.lowest = T, 
                        right = T)

diamonds$carat_nr <- as.numeric(diamonds$carat_q)
```

```{r}
results <- list()

for (b in 1:100) {
  set.seed(b)
  print(b)
  data_prob <- diamonds[sample(1:N, n_b), ]
  data_prob$w <- N/n_b
  data_prob_svy <- svydesign(ids = ~1, weights = ~ w, data = data_prob)
  
  pr <- plogis(-3.5 + 0.5*diamonds$carat_nr)
  data_nonprob <- setDT(diamonds[rbinom(N, 1, pr) == 1, ])

  nonprob_est <- nonprob(selection = ~ carat_q,
                         target = ~ price,
                         data = data_nonprob,
                         svydesign = data_prob_svy,
                         control_selection = controlSel(h=1))
  
  
  w_cal <- calib(Xs = model.matrix(~ carat_d, data_nonprob), 
                 d = nonprob_est$weights,
                 total = c(`(Intercept)`=sum(weights(data_prob_svy)),
                           svytotal(~carat_d, data_prob_svy)[-1]),
                 method = "linear")
  
  data_nonprob[, w:= nonprob_est$weights]
  data_nonprob[, cal_w:= w_cal*nonprob_est$weights]
  data_nonprob[, .(true = true, naive=mean(price), ipw=weighted.mean(price,w), ipw_cal=weighted.mean(price, cal_w))]
  
  nonprob_est_boot <- nonprob(selection = ~ carat_q,
                              target = ~ price,
                              data = data_nonprob,
                              svydesign = data_prob_svy,
                              control_selection = controlSel(h = 1),
                              control_inference = controlInf(var_method = "bootstrap", num_boot = 100))
  
  results[[b]] <- data.frame(a_l = nonprob_est$confidence_interval[1, 1],
                             a_u = nonprob_est$confidence_interval[1, 2],
                             b_l = nonprob_est_boot$confidence_interval[1, 1],
                             b_u = nonprob_est_boot$confidence_interval[1, 2])
}


results_all <- rbindlist(results)

results_all[, .(a_cr = mean(a_l < true & a_u > true),
                b_cr = mean(b_l < true & b_u > true))]
  
```

